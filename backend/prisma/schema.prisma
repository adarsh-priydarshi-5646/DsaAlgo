generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  username     String        @unique
  firstName    String?
  lastName     String?
  avatar       String?
  password     String?
  role         Role          @default(USER)
  isVerified   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // OAuth fields
  googleId     String?       @unique
  achievements Achievement[]
  progress     Progress[]
  submissions  Submission[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?
  color       String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  problems    Problem[]

  @@map("categories")
}

model Problem {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  description String
  difficulty  Difficulty
  tags        String?
  hints       String?
  examples    String?
  constraints String?
  timeLimit   Int          @default(1000)
  memoryLimit Int          @default(256)
  isActive    Boolean      @default(true)
  order       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  progress    Progress[]
  solutions   Solution[]
  submissions Submission[]

  @@map("problems")
}

model Solution {
  id              String   @id @default(cuid())
  language        String
  code            String
  explanation     String?
  timeComplexity  String?
  spaceComplexity String?
  isOptimal       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  problemId       String
  problem         Problem  @relation(fields: [problemId], references: [id])

  @@map("solutions")
}

model Submission {
  id          String           @id @default(cuid())
  code        String
  language    String
  status      SubmissionStatus
  runtime     Int?
  memory      Int?
  testsPassed Int              @default(0)
  totalTests  Int              @default(0)
  error       String?
  createdAt   DateTime         @default(now())
  userId      String
  problemId   String
  problem     Problem          @relation(fields: [problemId], references: [id])
  user        User             @relation(fields: [userId], references: [id])

  @@map("submissions")
}

model Progress {
  id          String        @id @default(cuid())
  status      ProblemStatus @default(NOT_STARTED)
  attempts    Int           @default(0)
  bestTime    Int?
  lastAttempt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  problemId   String
  problem     Problem       @relation(fields: [problemId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@unique([userId, problemId])
  @@map("progress")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String?
  type        String
  threshold   Int
  earnedAt    DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("achievements")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

enum ProblemStatus {
  NOT_STARTED
  ATTEMPTED
  SOLVED
}

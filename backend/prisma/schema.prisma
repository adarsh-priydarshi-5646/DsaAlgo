// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  firstName   String?
  lastName    String?
  avatar      String?
  password    String
  role        Role     @default(USER)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  progress    Progress[]
  submissions Submission[]
  achievements Achievement[]
  
  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?
  color       String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  problems    Problem[]
  
  @@map("categories")
}

model Problem {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String     @db.Text
  difficulty  Difficulty
  tags        String?    // JSON array of tags
  hints       String?    @db.Text // JSON array of hints
  examples    String?    @db.Text // JSON array of examples
  constraints String?    @db.Text
  timeLimit   Int        @default(1000) // in milliseconds
  memoryLimit Int        @default(256)  // in MB
  isActive    Boolean    @default(true)
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  solutions   Solution[]
  submissions Submission[]
  progress    Progress[]
  
  @@map("problems")
}

model Solution {
  id          String   @id @default(cuid())
  language    String
  code        String   @db.Text
  explanation String?  @db.Text
  timeComplexity String?
  spaceComplexity String?
  isOptimal   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  problemId   String
  problem     Problem  @relation(fields: [problemId], references: [id])
  
  @@map("solutions")
}

model Submission {
  id          String           @id @default(cuid())
  code        String           @db.Text
  language    String
  status      SubmissionStatus
  runtime     Int?             // in milliseconds
  memory      Int?             // in MB
  testsPassed Int              @default(0)
  totalTests  Int              @default(0)
  error       String?          @db.Text
  createdAt   DateTime         @default(now())

  // Relations
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  problemId   String
  problem     Problem          @relation(fields: [problemId], references: [id])
  
  @@map("submissions")
}

model Progress {
  id          String        @id @default(cuid())
  status      ProblemStatus @default(NOT_STARTED)
  attempts    Int           @default(0)
  bestTime    Int?          // in milliseconds
  lastAttempt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  problemId   String
  problem     Problem       @relation(fields: [problemId], references: [id])
  
  @@unique([userId, problemId])
  @@map("progress")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String?
  type        String   // e.g., "problems_solved", "streak", "difficulty"
  threshold   Int      // e.g., 10 problems, 7 day streak
  earnedAt    DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("achievements")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

enum ProblemStatus {
  NOT_STARTED
  ATTEMPTED
  SOLVED
}

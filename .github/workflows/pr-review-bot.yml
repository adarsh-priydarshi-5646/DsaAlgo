name: ü§ñ PR Review Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

jobs:
  pr-review-bot:
    name: üîç Automated PR Review
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            frontend/**/*.{js,jsx,ts,tsx,json}
            backend/**/*.{js,ts,json}
            *.{js,json,md}

      - name: üìä PR Analysis
        id: pr-analysis
        run: |
          echo "üîç Analyzing PR..."
          
          # Count changed files
          CHANGED_FILES_COUNT=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | wc -w)
          echo "changed_files_count=$CHANGED_FILES_COUNT" >> $GITHUB_OUTPUT
          
          # Check if critical files changed
          CRITICAL_FILES=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            case $file in
              "package.json"|"package-lock.json"|"yarn.lock"|"pnpm-lock.yaml")
                CRITICAL_FILES="$CRITICAL_FILES $file"
                ;;
              "backend/prisma/schema.prisma"|"backend/server.js")
                CRITICAL_FILES="$CRITICAL_FILES $file"
                ;;
              "frontend/src/App.jsx"|"frontend/vite.config.js")
                CRITICAL_FILES="$CRITICAL_FILES $file"
                ;;
            esac
          done
          echo "critical_files=$CRITICAL_FILES" >> $GITHUB_OUTPUT
          
          # Check PR size
          if [ $CHANGED_FILES_COUNT -gt 50 ]; then
            echo "pr_size=large" >> $GITHUB_OUTPUT
          elif [ $CHANGED_FILES_COUNT -gt 20 ]; then
            echo "pr_size=medium" >> $GITHUB_OUTPUT
          else
            echo "pr_size=small" >> $GITHUB_OUTPUT
          fi

      - name: üõ°Ô∏è Security Scan
        id: security-scan
        run: |
          echo "üîí Running security scan..."
          
          # Check for hardcoded secrets
          SECRETS_FOUND=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [ -f "$file" ]; then
              # Check for API keys, passwords, tokens
              if grep -iE "(api[_-]?key|password|secret|token|private[_-]?key)" "$file" | grep -E "(=|:)" | grep -vE "(process\.env|import|export|type|interface|\/\/|\/\*|\*\/)" > /dev/null; then
                SECRETS_FOUND="$SECRETS_FOUND $file"
              fi
              
              # Check for hardcoded URLs with credentials
              if grep -E "https?://[^:]+:[^@]+@" "$file" > /dev/null; then
                SECRETS_FOUND="$SECRETS_FOUND $file"
              fi
            fi
          done
          
          if [ -n "$SECRETS_FOUND" ]; then
            echo "secrets_found=true" >> $GITHUB_OUTPUT
            echo "secret_files=$SECRETS_FOUND" >> $GITHUB_OUTPUT
          else
            echo "secrets_found=false" >> $GITHUB_OUTPUT
          fi

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: üì¶ Install Frontend Dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: üì¶ Install Backend Dependencies  
        run: |
          cd backend
          npm ci --prefer-offline --no-audit

      - name: üîç Frontend Lint Check
        id: frontend-lint
        run: |
          cd frontend
          echo "üîç Running frontend lint..."
          if npm run lint > lint-output.txt 2>&1; then
            echo "frontend_lint_passed=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_lint_passed=false" >> $GITHUB_OUTPUT
            echo "frontend_lint_errors<<EOF" >> $GITHUB_OUTPUT
            cat lint-output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: üèóÔ∏è Frontend Build Test
        id: frontend-build
        run: |
          cd frontend
          echo "üèóÔ∏è Testing frontend build..."
          if npm run build > build-output.txt 2>&1; then
            echo "frontend_build_passed=true" >> $GITHUB_OUTPUT
            
            # Check bundle size
            BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
            echo "bundle_size=$BUNDLE_SIZE" >> $GITHUB_OUTPUT
          else
            echo "frontend_build_passed=false" >> $GITHUB_OUTPUT
            echo "frontend_build_errors<<EOF" >> $GITHUB_OUTPUT
            cat build-output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: üß™ Backend Syntax Check
        id: backend-syntax
        run: |
          cd backend
          echo "üß™ Checking backend syntax..."
          
          # Check for syntax errors in JS files
          SYNTAX_ERRORS=""
          for file in $(find . -name "*.js" -not -path "./node_modules/*"); do
            if ! node -c "$file" 2>/dev/null; then
              SYNTAX_ERRORS="$SYNTAX_ERRORS $file"
            fi
          done
          
          if [ -n "$SYNTAX_ERRORS" ]; then
            echo "backend_syntax_passed=false" >> $GITHUB_OUTPUT
            echo "backend_syntax_errors=$SYNTAX_ERRORS" >> $GITHUB_OUTPUT
          else
            echo "backend_syntax_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: üóÑÔ∏è Database Schema Check
        id: db-check
        if: contains(steps.changed-files.outputs.all_changed_files, 'backend/prisma/schema.prisma')
        run: |
          cd backend
          echo "üóÑÔ∏è Validating Prisma schema..."
          
          if npx prisma validate > schema-output.txt 2>&1; then
            echo "schema_valid=true" >> $GITHUB_OUTPUT
          else
            echo "schema_valid=false" >> $GITHUB_OUTPUT
            echo "schema_errors<<EOF" >> $GITHUB_OUTPUT
            cat schema-output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: üìù Generate Review Comment
        id: review-comment
        run: |
          echo "üìù Generating review comment..."
          
          # Start building the comment
          COMMENT="## ü§ñ Automated PR Review\n\n"
          
          # PR Overview
          COMMENT="${COMMENT}### üìä PR Overview\n"
          COMMENT="${COMMENT}- **Changed Files:** ${{ steps.pr-analysis.outputs.changed_files_count }}\n"
          COMMENT="${COMMENT}- **PR Size:** ${{ steps.pr-analysis.outputs.pr_size }}\n"
          
          if [ -n "${{ steps.pr-analysis.outputs.critical_files }}" ]; then
            COMMENT="${COMMENT}- **‚ö†Ô∏è Critical Files Changed:** ${{ steps.pr-analysis.outputs.critical_files }}\n"
          fi
          
          COMMENT="${COMMENT}\n### üîç Code Quality Checks\n\n"
          
          # Security Check
          if [ "${{ steps.security-scan.outputs.secrets_found }}" = "true" ]; then
            COMMENT="${COMMENT}‚ùå **Security Issues Found**\n"
            COMMENT="${COMMENT}- Potential secrets detected in: ${{ steps.security-scan.outputs.secret_files }}\n"
            COMMENT="${COMMENT}- Please remove hardcoded secrets and use environment variables\n\n"
          else
            COMMENT="${COMMENT}‚úÖ **Security Scan:** No issues found\n\n"
          fi
          
          # Frontend Checks
          if [ "${{ steps.frontend-lint.outputs.frontend_lint_passed }}" = "true" ]; then
            COMMENT="${COMMENT}‚úÖ **Frontend Lint:** Passed\n"
          else
            COMMENT="${COMMENT}‚ùå **Frontend Lint:** Failed\n"
            COMMENT="${COMMENT}\`\`\`\n${{ steps.frontend-lint.outputs.frontend_lint_errors }}\n\`\`\`\n"
          fi
          
          if [ "${{ steps.frontend-build.outputs.frontend_build_passed }}" = "true" ]; then
            COMMENT="${COMMENT}‚úÖ **Frontend Build:** Passed (Bundle: ${{ steps.frontend-build.outputs.bundle_size }})\n"
          else
            COMMENT="${COMMENT}‚ùå **Frontend Build:** Failed\n"
            COMMENT="${COMMENT}\`\`\`\n${{ steps.frontend-build.outputs.frontend_build_errors }}\n\`\`\`\n"
          fi
          
          # Backend Checks
          if [ "${{ steps.backend-syntax.outputs.backend_syntax_passed }}" = "true" ]; then
            COMMENT="${COMMENT}‚úÖ **Backend Syntax:** Passed\n"
          else
            COMMENT="${COMMENT}‚ùå **Backend Syntax:** Failed\n"
            COMMENT="${COMMENT}- Files with errors: ${{ steps.backend-syntax.outputs.backend_syntax_errors }}\n"
          fi
          
          # Database Schema Check
          if [ "${{ steps.db-check.outputs.schema_valid }}" = "true" ]; then
            COMMENT="${COMMENT}‚úÖ **Database Schema:** Valid\n"
          elif [ "${{ steps.db-check.outputs.schema_valid }}" = "false" ]; then
            COMMENT="${COMMENT}‚ùå **Database Schema:** Invalid\n"
            COMMENT="${COMMENT}\`\`\`\n${{ steps.db-check.outputs.schema_errors }}\n\`\`\`\n"
          fi
          
          # Overall Status
          COMMENT="${COMMENT}\n### üéØ Review Status\n\n"
          
          # Check if all tests passed
          ALL_PASSED=true
          if [ "${{ steps.security-scan.outputs.secrets_found }}" = "true" ]; then
            ALL_PASSED=false
          fi
          if [ "${{ steps.frontend-lint.outputs.frontend_lint_passed }}" = "false" ]; then
            ALL_PASSED=false
          fi
          if [ "${{ steps.frontend-build.outputs.frontend_build_passed }}" = "false" ]; then
            ALL_PASSED=false
          fi
          if [ "${{ steps.backend-syntax.outputs.backend_syntax_passed }}" = "false" ]; then
            ALL_PASSED=false
          fi
          if [ "${{ steps.db-check.outputs.schema_valid }}" = "false" ]; then
            ALL_PASSED=false
          fi
          
          if [ "$ALL_PASSED" = "true" ]; then
            COMMENT="${COMMENT}üéâ **All checks passed!** This PR is ready for human review.\n\n"
            COMMENT="${COMMENT}### üìã Merge Checklist\n"
            COMMENT="${COMMENT}- ‚úÖ Code quality checks passed\n"
            COMMENT="${COMMENT}- ‚úÖ Build successful\n"
            COMMENT="${COMMENT}- ‚úÖ No security issues\n"
            COMMENT="${COMMENT}- üîÑ Awaiting human review\n"
            echo "all_checks_passed=true" >> $GITHUB_OUTPUT
          else
            COMMENT="${COMMENT}‚ùå **Some checks failed.** Please fix the issues above before merging.\n\n"
            COMMENT="${COMMENT}### üîß Required Actions\n"
            COMMENT="${COMMENT}1. Fix all failed checks mentioned above\n"
            COMMENT="${COMMENT}2. Push your changes to update this PR\n"
            COMMENT="${COMMENT}3. Wait for re-review by the bot\n"
            echo "all_checks_passed=false" >> $GITHUB_OUTPUT
          fi
          
          COMMENT="${COMMENT}\n---\n*ü§ñ This review was generated automatically. For questions, contact the maintainers.*"
          
          # Save comment to file
          echo -e "$COMMENT" > pr-comment.md
          
          # Also save to output for GitHub Actions
          echo "review_comment<<EOF" >> $GITHUB_OUTPUT
          echo -e "$COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üí¨ Post Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr-comment.md', 'utf8');
            
            // Check if bot already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ü§ñ Automated PR Review')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: üè∑Ô∏è Add Labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = [];
            
            // Add size label
            const prSize = '${{ steps.pr-analysis.outputs.pr_size }}';
            labels.push(`size/${prSize}`);
            
            // Add status label
            const allPassed = '${{ steps.review-comment.outputs.all_checks_passed }}';
            if (allPassed === 'true') {
              labels.push('‚úÖ ready-for-review');
            } else {
              labels.push('‚ùå needs-fixes');
            }
            
            // Add critical files label if needed
            if ('${{ steps.pr-analysis.outputs.critical_files }}') {
              labels.push('‚ö†Ô∏è critical-changes');
            }
            
            // Add security label if issues found
            if ('${{ steps.security-scan.outputs.secrets_found }}' === 'true') {
              labels.push('üîí security-review');
            }
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

      - name: ‚ùå Fail if checks failed
        if: steps.review-comment.outputs.all_checks_passed == 'false'
        run: |
          echo "‚ùå Some checks failed. Please review the bot comment for details."
          exit 1

      - name: ‚úÖ Success Summary
        if: steps.review-comment.outputs.all_checks_passed == 'true'
        run: |
          echo "‚úÖ All automated checks passed!"
          echo "üìã PR Summary:"
          echo "  - Files changed: ${{ steps.pr-analysis.outputs.changed_files_count }}"
          echo "  - PR size: ${{ steps.pr-analysis.outputs.pr_size }}"
          echo "  - Security: ‚úÖ No issues"
          echo "  - Frontend: ‚úÖ Build & lint passed"
          echo "  - Backend: ‚úÖ Syntax check passed"
          echo "üéâ Ready for human review!"

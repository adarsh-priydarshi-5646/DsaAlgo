name: ü§ñ Auto Code Review & Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  auto-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: Run Frontend Checks
        id: frontend-check
        run: |
          cd frontend
          echo "Running frontend checks..."
          
          # Build check
          if npm run build; then
            echo "‚úÖ Frontend build: PASSED"
            echo "frontend_build=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Frontend build: FAILED"
            echo "frontend_build=failed" >> $GITHUB_OUTPUT
          fi
          
          # Lint check (warnings allowed)
          if npm run lint -- --max-warnings 10; then
            echo "‚úÖ Frontend lint: PASSED"
            echo "frontend_lint=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Frontend lint: WARNINGS"
            echo "frontend_lint=warnings" >> $GITHUB_OUTPUT
          fi

      - name: Run Backend Checks
        id: backend-check
        run: |
          cd backend
          echo "Running backend checks..."
          
          # Prisma schema check
          if npx prisma validate; then
            echo "‚úÖ Prisma schema: VALID"
            echo "prisma_schema=valid" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Prisma schema: INVALID"
            echo "prisma_schema=invalid" >> $GITHUB_OUTPUT
          fi
          
          # Server config check
          if node -c server.js; then
            echo "‚úÖ Server config: VALID"
            echo "server_config=valid" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Server config: INVALID"
            echo "server_config=invalid" >> $GITHUB_OUTPUT
          fi

      - name: Security Check
        id: security-check
        run: |
          echo "Running security checks..."
          
          # Check for hardcoded secrets
          if grep -r "password\|secret\|key" --include="*.js" --include="*.jsx" --exclude-dir=node_modules . | grep -v "process.env" | grep -v "console.log" | grep -v "// " | head -5; then
            echo "‚ö†Ô∏è Potential secrets found"
            echo "security=warnings" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No hardcoded secrets found"
            echo "security=passed" >> $GITHUB_OUTPUT
          fi

      - name: Auto Review Comment
        uses: actions/github-script@v7
        with:
          script: |
            const frontendBuild = '${{ steps.frontend-check.outputs.frontend_build }}';
            const frontendLint = '${{ steps.frontend-check.outputs.frontend_lint }}';
            const prismaSchema = '${{ steps.backend-check.outputs.prisma_schema }}';
            const serverConfig = '${{ steps.backend-check.outputs.server_config }}';
            const security = '${{ steps.security-check.outputs.security }}';
            
            let reviewBody = '## ü§ñ Automated Code Review\n\n';
            let approveReview = true;
            let issues = [];
            
            // Frontend checks
            reviewBody += '### üé® Frontend Analysis\n';
            if (frontendBuild === 'passed') {
              reviewBody += '‚úÖ **Build**: Successful\n';
            } else {
              reviewBody += '‚ùå **Build**: Failed - Please fix build errors\n';
              approveReview = false;
              issues.push('Frontend build failed');
            }
            
            if (frontendLint === 'passed') {
              reviewBody += '‚úÖ **Linting**: Clean code\n';
            } else {
              reviewBody += '‚ö†Ô∏è **Linting**: Some warnings found (acceptable)\n';
            }
            
            // Backend checks
            reviewBody += '\n### ‚öôÔ∏è Backend Analysis\n';
            if (prismaSchema === 'valid') {
              reviewBody += '‚úÖ **Database Schema**: Valid\n';
            } else {
              reviewBody += '‚ùå **Database Schema**: Invalid - Please check Prisma schema\n';
              approveReview = false;
              issues.push('Invalid Prisma schema');
            }
            
            if (serverConfig === 'valid') {
              reviewBody += '‚úÖ **Server Config**: Valid\n';
            } else {
              reviewBody += '‚ùå **Server Config**: Invalid - Please check server.js\n';
              approveReview = false;
              issues.push('Invalid server configuration');
            }
            
            // Security checks
            reviewBody += '\n### üîí Security Analysis\n';
            if (security === 'passed') {
              reviewBody += '‚úÖ **Security**: No hardcoded secrets detected\n';
            } else {
              reviewBody += '‚ö†Ô∏è **Security**: Potential secrets found - Please review\n';
            }
            
            // Final verdict
            reviewBody += '\n### üìã Summary\n';
            if (approveReview) {
              reviewBody += 'üéâ **Status**: APPROVED - Ready to merge!\n';
              reviewBody += '\nThis PR passes all automated checks and is ready for merge.';
            } else {
              reviewBody += 'üö´ **Status**: CHANGES REQUESTED\n';
              reviewBody += '\n**Issues to fix:**\n';
              issues.forEach(issue => {
                reviewBody += `- ${issue}\n`;
              });
              reviewBody += '\nPlease address these issues and push new commits.';
            }
            
            // Submit review
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: reviewBody,
              event: approveReview ? 'APPROVE' : 'REQUEST_CHANGES'
            });

      - name: Auto Merge (if approved)
        if: steps.frontend-check.outputs.frontend_build == 'passed' && steps.backend-check.outputs.prisma_schema == 'valid' && steps.backend-check.outputs.server_config == 'valid'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                commit_title: `ü§ñ Auto-merge: ${context.payload.pull_request.title}`,
                commit_message: 'Automatically merged after passing all checks',
                merge_method: 'squash'
              });
              
              console.log('‚úÖ PR auto-merged successfully!');
            } catch (error) {
              console.log('‚ùå Auto-merge failed:', error.message);
            }

name: ü§ñ Automated Code Review Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

jobs:
  code-review:
    name: üîç Comprehensive Code Review
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
      
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json
            
      - name: üì¶ Install Dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci
          
      - name: üßπ Code Quality Checks
        id: quality-checks
        run: |
          echo "## üîç Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Frontend Linting
          echo "### üé® Frontend Linting" >> $GITHUB_STEP_SUMMARY
          cd frontend
          if npm run lint 2>&1 | tee lint-output.txt; then
            echo "‚úÖ Frontend linting passed" >> $GITHUB_STEP_SUMMARY
            echo "frontend_lint=‚úÖ PASSED" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Frontend linting failed" >> $GITHUB_STEP_SUMMARY
            echo "frontend_lint=‚ùå FAILED" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat lint-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Backend Linting
          echo "### üîß Backend Linting" >> $GITHUB_STEP_SUMMARY
          cd ../backend
          if npm run lint 2>&1 | tee lint-output.txt; then
            echo "‚úÖ Backend linting passed" >> $GITHUB_STEP_SUMMARY
            echo "backend_lint=‚úÖ PASSED" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Backend linting failed" >> $GITHUB_STEP_SUMMARY
            echo "backend_lint=‚ùå FAILED" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat lint-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: üèóÔ∏è Build Checks
        id: build-checks
        run: |
          echo "### üèóÔ∏è Build Verification" >> $GITHUB_STEP_SUMMARY
          
          # Frontend Build
          cd frontend
          if npm run build 2>&1 | tee build-output.txt; then
            echo "‚úÖ Frontend build successful" >> $GITHUB_STEP_SUMMARY
            echo "frontend_build=‚úÖ PASSED" >> $GITHUB_OUTPUT
            
            # Check build size
            BUILD_SIZE=$(du -sh dist/ | cut -f1)
            echo "üì¶ Build size: $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Frontend build failed" >> $GITHUB_STEP_SUMMARY
            echo "frontend_build=‚ùå FAILED" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat build-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: üîí Security Audit
        id: security-audit
        run: |
          echo "### üîí Security Audit" >> $GITHUB_STEP_SUMMARY
          
          # Frontend Security Audit
          cd frontend
          if npm audit --audit-level=high 2>&1 | tee audit-output.txt; then
            echo "‚úÖ Frontend security audit passed" >> $GITHUB_STEP_SUMMARY
            echo "frontend_security=‚úÖ PASSED" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Frontend security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            echo "frontend_security=‚ö†Ô∏è VULNERABILITIES" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat audit-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Backend Security Audit
          cd ../backend
          if npm audit --audit-level=high 2>&1 | tee audit-output.txt; then
            echo "‚úÖ Backend security audit passed" >> $GITHUB_STEP_SUMMARY
            echo "backend_security=‚úÖ PASSED" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Backend security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            echo "backend_security=‚ö†Ô∏è VULNERABILITIES" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat audit-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: üìä Code Analysis
        id: code-analysis
        run: |
          echo "### üìä Code Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Check for common issues
          ISSUES_FOUND=0
          
          # Check for console.log in production code (excluding allowed files)
          echo "#### üêõ Console Log Check" >> $GITHUB_STEP_SUMMARY
          CONSOLE_LOGS=$(find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | \
            grep -v node_modules | \
            grep -v "server.js" | \
            grep -v "seed.js" | \
            grep -v "config/" | \
            grep -v "middleware/auth.js" | \
            grep -v "controllers/" | \
            xargs grep -l "console\." || true)
          
          if [ -n "$CONSOLE_LOGS" ]; then
            echo "‚ö†Ô∏è Console statements found in:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$CONSOLE_LOGS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "‚úÖ No inappropriate console statements found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for TODO/FIXME comments
          echo "#### üìù TODO/FIXME Check" >> $GITHUB_STEP_SUMMARY
          TODOS=$(find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | \
            grep -v node_modules | \
            xargs grep -n "TODO\|FIXME" || true)
          
          if [ -n "$TODOS" ]; then
            echo "üìã TODO/FIXME items found:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$TODOS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No TODO/FIXME items found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for hardcoded credentials
          echo "#### üîê Credential Check" >> $GITHUB_STEP_SUMMARY
          CREDENTIALS=$(find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | \
            grep -v node_modules | \
            xargs grep -i "password.*=.*['\"][^'\"]*['\"]" || true)
          
          if [ -n "$CREDENTIALS" ]; then
            echo "üö® Potential hardcoded credentials found:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$CREDENTIALS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "‚úÖ No hardcoded credentials found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "code_issues=$ISSUES_FOUND" >> $GITHUB_OUTPUT
          
      - name: üìù Generate Review Comment
        uses: actions/github-script@v7
        with:
          script: |
            const frontendLint = '${{ steps.quality-checks.outputs.frontend_lint }}';
            const backendLint = '${{ steps.quality-checks.outputs.backend_lint }}';
            const frontendBuild = '${{ steps.build-checks.outputs.frontend_build }}';
            const frontendSecurity = '${{ steps.security-audit.outputs.frontend_security }}';
            const backendSecurity = '${{ steps.security-audit.outputs.backend_security }}';
            const codeIssues = parseInt('${{ steps.code-analysis.outputs.code_issues }}');
            
            let reviewBody = `## ü§ñ Automated Code Review Results\n\n`;
            
            reviewBody += `### üìä Summary\n`;
            reviewBody += `| Check | Frontend | Backend |\n`;
            reviewBody += `|-------|----------|----------|\n`;
            reviewBody += `| Linting | ${frontendLint} | ${backendLint} |\n`;
            reviewBody += `| Build | ${frontendBuild} | N/A |\n`;
            reviewBody += `| Security | ${frontendSecurity} | ${backendSecurity} |\n\n`;
            
            if (codeIssues > 0) {
              reviewBody += `### ‚ö†Ô∏è Issues Found\n`;
              reviewBody += `${codeIssues} potential issues detected. Please review the detailed analysis above.\n\n`;
            }
            
            // Determine overall status
            const hasFailures = frontendLint.includes('‚ùå') || 
                               backendLint.includes('‚ùå') || 
                               frontendBuild.includes('‚ùå');
            
            const hasWarnings = frontendSecurity.includes('‚ö†Ô∏è') || 
                               backendSecurity.includes('‚ö†Ô∏è') || 
                               codeIssues > 0;
            
            if (hasFailures) {
              reviewBody += `### ‚ùå Review Status: CHANGES REQUESTED\n`;
              reviewBody += `Critical issues found that must be fixed before merging.\n\n`;
            } else if (hasWarnings) {
              reviewBody += `### ‚ö†Ô∏è Review Status: APPROVED WITH COMMENTS\n`;
              reviewBody += `Code looks good but please address the warnings above.\n\n`;
            } else {
              reviewBody += `### ‚úÖ Review Status: APPROVED\n`;
              reviewBody += `All checks passed! Code is ready for merge.\n\n`;
            }
            
            reviewBody += `### üöÄ Next Steps\n`;
            reviewBody += `- Fix any failing checks\n`;
            reviewBody += `- Address security vulnerabilities if any\n`;
            reviewBody += `- Remove inappropriate console statements\n`;
            reviewBody += `- Consider resolving TODO/FIXME items\n\n`;
            
            reviewBody += `---\n*ü§ñ This review was generated automatically by the Code Review Bot*`;
            
            // Post review comment
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: reviewBody,
              event: hasFailures ? 'REQUEST_CHANGES' : (hasWarnings ? 'COMMENT' : 'APPROVE')
            });
            
      - name: üéØ Set Status Check
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const frontendLint = '${{ steps.quality-checks.outputs.frontend_lint }}';
            const backendLint = '${{ steps.quality-checks.outputs.backend_lint }}';
            const frontendBuild = '${{ steps.build-checks.outputs.frontend_build }}';
            
            const hasFailures = frontendLint.includes('‚ùå') || 
                               backendLint.includes('‚ùå') || 
                               frontendBuild.includes('‚ùå');
            
            const state = hasFailures ? 'failure' : 'success';
            const description = hasFailures ? 
              'Code review found issues that need to be fixed' : 
              'All code review checks passed';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'Code Review Bot'
            });
